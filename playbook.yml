- hosts: all
  become: true
  tasks:

    # disable unattended upgrades **********************************************
    # note: this disable and reboot strategy is the only way to reliably avoid
    #       apt locks during playbook execution

    - name: Unattended upgrades check
      shell:
        cmd: "dpkg -l | grep unattended-upgrades | wc -l"
      register: unattended_upgrades_check

    - name: Disable Unattended upgrades
      when: unattended_upgrades_check.stdout | int > 0
      systemd:
        name: unattended-upgrades
        enabled: no

    - name: Reboot
      when: unattended_upgrades_check.stdout | int > 0
      ansible.builtin.reboot:
        post_reboot_delay: 60 # needed to avoid early script termination
        reboot_timeout: 30
        msg: "Reboot initiated by Ansible"
      become: true

    # configure ufw firewall ***************************************************

    - name: Allow SSH access on port 22
      ufw:
        rule: allow
        to_port: 22
        protocol: tcp
        comment: "Allow SSH connections"

    - name: Allow HTTP traffic on port 80
      ufw:
        rule: allow
        to_port: 80
        protocol: tcp
        comment: "Allow HTTP traffic"

    - name: Allow HTTPS traffic on port 443
      ufw:
        rule: allow
        to_port: 443
        protocol: tcp
        comment: "Allow HTTPS traffic"

    - name: Reload UFW firewall
      ufw:
        state: reloaded

    # install system packages **************************************************

    - name: Update apt
      apt:
          update_cache: yes

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - virtualenv
          - python3-pip
          - python3-setuptools
          - pipx
          - golang-go
        state: latest
        update_cache: true

    # install docker-ce ********************************************************

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: Set Docker context to default
      shell: docker context use default

    - name: Register Docker version
      shell: docker --version
      register: docker_version

    - debug:
        var: docker_version.stdout

    # install python w/docker **************************************************

    - name: Register Python 3.X version
      command: python3 --version
      register: pyver
      changed_when: false
      failed_when: pyver.rc != 0

    - name: Remove Python 3.X EXTERNALLY-MANAGED file
      file:
        state: absent
        path: "/usr/lib/python{{ pyver.stdout.split()[1] | regex_search('([0-9]+\\.[0-9]+)') }}/EXTERNALLY-MANAGED"
      when: pyver.stdout | regex_search('3\.[0-9]+')
      # @see: https://github.com/geerlingguy/ansible-role-pip/issues/57

    - name: Install Docker Module for Python
      pip:
        name: docker

    # install xcaddy ***********************************************************

    - name: Add xcaddy GPG apt Key
      shell: curl -1sLf 'https://dl.cloudsmith.io/public/caddy/xcaddy/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-xcaddy-archive-keyring.gpg

    - name: Add xcaddy repository
      shell: curl -1sLf 'https://dl.cloudsmith.io/public/caddy/xcaddy/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-xcaddy.list

    - name: Update apt and install xcaddy
      apt:
        name: xcaddy
        state: latest
        update_cache: true

    # build & install caddy w/plugins ******************************************

    - name: Build caddy with plugins
      shell: |
        xcaddy build \
        --with github.com/caddy-dns/cloudflare \
        --with github.com/caddy-dns/digitalocean \
        --with github.com/caddyserver/transform-encoder \
        --with github.com/lucaslorentz/caddy-docker-proxy/plugin/v2

    - name: Install caddy
      shell: mv caddy /usr/bin/caddy

    - name: Register caddy version
      shell: caddy version
      register: caddy_version

    - debug:
        var: caddy_version.stdout

    - name: Create '/etc/caddy' directory
      file:
        path: /etc/caddy
        state: directory

    - name: Create '/etc/caddy/Caddyfile' file
      copy:
        dest: /etc/caddy/Caddyfile
        content: |
          MY_DOMAIN {
              root * /var/www/static
              file_server
          }
        group: sys
        owner: root
        mode: 0555

    - name: Create '/etc/caddy/caddy.env' file
      copy:
        dest: /etc/caddy/caddy.env
        content: |
          # https://github.com/lucaslorentz/caddy-docker-proxy?tab=readme-ov-file#caddy-cli
          CADDY_DOCKER_CADDYFILE_PATH=/etc/caddy/Caddyfile
          CADDY_INGRESS_NETWORKS=caddy
          #CADDY_CONTROLLER_NETWORK=
          #CADDY_DOCKER_SOCKETS=
          #CADDY_DOCKER_CERTS_PATH=
          #CADDY_DOCKER_APIS_VERSION=
          #CADDY_DOCKER_LABEL_PREFIX=
          #CADDY_DOCKER_MODE=
          #CADDY_DOCKER_POLLING_INTERVAL=
          #CADDY_DOCKER_PROCESS_CADDYFILE=
          #CADDY_DOCKER_PROXY_SERVICE_TASKS=
          #CADDY_DOCKER_SCAN_STOPPED_CONTAINERS=
          #CADDY_DOCKER_NO_SCOPE=
        group: sys
        owner: root
        mode: 0700

    - name: Create '/etc/systemd/system/caddy.service' file
      copy:
        dest: /etc/systemd/system/caddy.service
        content: |
          [Unit]
          Description=Caddy
          Documentation=https://caddyserver.com/docs/
          After=network.target network-online.target
          Requires=network-online.target
          
          [Service]
          Type=notify
          User=caddy
          Group=caddy
          ExecStart=/usr/bin/caddy docker-proxy --envfile /etc/caddy/caddy.env
          ExecReload=/usr/bin/caddy reload --config /etc/caddy/Caddyfile
          TimeoutStopSec=5s
          LimitNOFILE=1048576
          PrivateTmp=true
          ProtectSystem=full
          AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
          
          [Install]
          WantedBy=multi-user.target
        group: sys
        owner: root
        mode: 0700

    - name: Reload systemd
      systemd:
          daemon_reload: yes

    - name: Enable caddy service
      systemd:
          name: caddy
          enabled: yes

    - name: Add caddy to docker group
      user:
          name: caddy
          groups: docker
          append: yes

    # initial project workspace ************************************************

    - name: Create Docker network 'caddy'
      docker_network:
        name: caddy
        state: present

    - name: Create '/var/www/containers' directory
      file:
        path: /var/www/containers
        state: directory

    # update & upgrade *********************************************************

    - name: Update and upgrade apt packages
      become: true
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400 #One day

    - name: Re-enable Unattended upgrades if applicable
      when: unattended_upgrades_check.stdout | int > 0
      systemd:
        name: unattended-upgrades
        enabled: yes

    # configure user ***********************************************************

    - name: Disable password logins
      shell:
        cmd: "sed -i -E 's/#?PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config && service ssh restart"

    # configure ssh ************************************************************

    - name: Allow public key authentication
      shell:
        cmd: "sed -i -E 's/#?PubkeyAuthentication no/PubkeyAuthentication yes/' /etc/ssh/sshd_config && service ssh restart"

    # configure login messaging ************************************************

    - name: Update ~/.bashrc with version info
      blockinfile:
        path: "~/.bashrc"
        block: |
          cd /var/www/containers
          clear
          NORMAL=$'\e[0m'
          YELLOW=$'\e[33m'
          CYAN=$'\e[36m'
          BLUE=$'\e[34m'
          RED=$'\e[31m'
          MAGENTA=$'\e[35m'
          GREEN=$'\e[32m'
          echo ""
          echo "${GREEN}――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${NORMAL}"
          echo "🐲 dragon-server: ${CYAN}https://github.com/frosthaven/dragon-server"
          echo "${GREEN}――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${NORMAL}"
          echo ""
          echo "$(lsb_release -a)"
          echo ""
          echo "Caddy version $(caddy version)"
          echo "$(docker --version)"
          echo ""
          echo "Caddy configs  ${YELLOW}/etc/caddy/Caddyfile${NORMAL}"
          echo "Caddy service  ${YELLOW}/etc/systemd/system/caddy.service${NORMAL}"
          echo "Containers     ${YELLOW}/var/www/containers${NORMAL}"
          echo "Static files   ${YELLOW}/var/www/static${NORMAL}"
          echo ""
          echo "${BLUE}$(sudo docker ps)${NORMAL}"
          echo ""
        state: present
        create: true